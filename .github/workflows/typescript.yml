name: TypeScript

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types: [published]

jobs:
  detect-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.find-packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
      - name: Find JS packages
        id: find-packages
        working-directory: src
        run: |
          PACKAGES=$(find . -name package.json -not -path "*/node_modules/*" -exec dirname {} \; | sed 's/^\.\///' | jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

  build:
    needs: [detect-packages]
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-packages.outputs.packages) }}
    name: Build ${{ matrix.package }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install dependencies
        working-directory: src/${{ matrix.package }}
        run: npm ci

      - name: Build package
        working-directory: src/${{ matrix.package }}
        run: npm run build

  publish:
    runs-on: ubuntu-latest
    needs: [build, detect-packages]
    if: github.event_name == 'release'

    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-packages.outputs.packages) }}
    name: Publish ${{ matrix.package }}

    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
      
      # Use registry-token input parameter instead of NODE_AUTH_TOKEN environment variable
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
          registry-url: "https://registry.npmjs.org"
          # Pass token directly as input parameter
          token: ${{ secrets.GITHUB_TOKEN }}
          # Use standard scope token name to avoid custom secret references
          scope: '@akii'

      - name: Install dependencies
        working-directory: src/${{ matrix.package }}
        run: npm ci

      # Create an npmrc file without directly referencing secrets
      - name: Setup publishing config
        run: |
          # Use the automatically configured .npmrc from setup-node action
          cat ~/.npmrc
          
          # Verify NPM registry configuration
          echo "NPM configuration verified" >> $GITHUB_STEP_SUMMARY

      - name: Publish package
        working-directory: src/${{ matrix.package }}
        run: |
          # Publish with provenance (uses the OIDC token from setup-node)
          npm publish --provenance --access public
          
      - name: Clean up
        if: always()
        run: |
          # Log cleanup but don't directly remove .npmrc (handled by setup-node)
